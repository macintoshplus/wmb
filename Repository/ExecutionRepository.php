<?php

namespace JbNahan\Bundle\WorkflowManagerBundle\Repository;

use Doctrine\ORM\EntityRepository;
use JbNahan\Bundle\WorkflowManagerBundle\Entity\ExecutionSearch;

/**
 * ExecutionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ExecutionRepository extends EntityRepository
{
    /**
     * @param int $workflowId
     * @return ArrayCollection
     */
    public function getExecutionById($executionId)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('e, s')
        ->leftJoin('e.states', 's')
        ->where('e.id = :id')
        ->setParameter('id', $executionId);

        return $qb->getQuery()->getResult();
    }

    /**
     * @param ExecutionSearch $param
     * @return QueryBuilder
     */
    public function getQbSearch(ExecutionSearch $param)
    {
        $qb = $this->createQueryBuilder('e');
        //$qb->leftJoin('JbNahan\Bundle\WorkflowManagerBundle\Entity\Definition', 'd', \Doctrine\ORM\Query\Expr\Join::WITH, 'e.definition = d.id');

        //Partie obligatoire

        //Limite aux roles
        if (is_array($param->getDefinitionList()) &&
            is_array($param->getRoles())) { //

            $expr = '';
            foreach ($param->getRoles() as $role) {
                $expr .= ($expr===''? '':' OR ') . 'e.roles like \'%'.$role.'%\'';
            }
            $list = (0 === count($param->getDefinitionList()))? '':", '" . implode("','", $param->getDefinitionList()) . "'";
            $qb->andWhere('((' . $expr . ') OR ( e.definition IN (\'-1\'' . $list . ')))');
            //$qb->orWhere($qb->expr()->in('e.definition', $param->getDefinitionList()));

        }

        //Partie recherche

        if (null !== $param->getId()) {
            $qb->andWhere('e.id = :id')
                ->setParameter('id', $param->getId());
        }

        if (null !== $param->getName()) {
            $qb->andWhere($qb->expr()->like('e.name', $qb->expr()->literal('%'.$param->getName().'%')));
        }

        if (null !== $param->getSuspendedStep()) {
            $qb->andWhere($qb->expr()->like('e.suspendedStep', $qb->expr()->literal('%'.$param->getSuspendedStep().'%')));
        }

        if (null !== $param->getDefinition()) {
            $qb->andWhere('e.definition = :def')
                ->setParameter('def', $param->getDefinition());
        }

        if (null !== $param->getIsEnded()) {
            if (true == $param->getIsEnded()) {
                $qb->andWhere($qb->expr()->isNotNull('e.endAt'));
            }
            //c'est pas publié
            if (false == $param->getIsEnded()) {
                $qb->andWhere($qb->expr()->isNull('e.endAt'));
            }
        }

        if (null !== $param->getIsCanceled()) {
            if (true == $param->getIsCanceled()) {
                $qb->andWhere($qb->expr()->isNotNull('e.canceledAt'));
            }
            //c'est pas publié
            if (false == $param->getIsCanceled()) {
                $qb->andWhere($qb->expr()->isNull('e.canceledAt'));
            }
        }

        $qb = $this->addFilterDate($qb, 'e.canceledAt', $param->getCanceledAt(), $param->getCanceledAtEnd());
        $qb = $this->addFilterDate($qb, 'e.endAt', $param->getEndAt(), $param->getEndAtEnd());
        $qb = $this->addFilterDate($qb, 'e.startedAt', $param->getStartedAt(), $param->getStartedAtEnd());

        return $qb;
    }


    private function addFilterDate($qb, $field, $dateDebut, $dateFin)
    {
        if (null !== $dateDebut && null !== $dateFin) {
            $dateDebut = $dateDebut;
            $dateDebut->setTime(0, 0, 0);
            $dateFin = $dateFin;
            $dateFin->setTime(23, 59, 59);
            $qb->andWhere($qb->expr()->between($field, $qb->expr()->literal($dateDebut->format("Y-m-d H:i:s")), $qb->expr()->literal($dateFin->format("Y-m-d H:i:s"))));
        }
        if (null !== $dateDebut && null === $dateFin) {
            $dateDebut = $dateDebut;
            $dateDebut->setTime(0, 0, 0);
            $qb->andWhere($qb->expr()->gte($field, $qb->expr()->literal($dateDebut->format("Y-m-d H:i:s"))));
        }
        if (null === $dateDebut && null !== $dateFin) {
            $dateFin = $dateFin;
            $dateFin->setTime(23, 59, 59);
            $qb->andWhere($qb->expr()->lte($field, $qb->expr()->literal($dateFin->format("Y-m-d H:i:s"))));
        }
        return $qb;
    }
}
